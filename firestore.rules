rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Quiz results - users can read their own, admins can read all
    match /quiz_results/{resultId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.admin == true);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.admin == true);
    }
    
    // Quizzes - readable by all authenticated users, writable by admins
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.educator == true);
    }
    
    // Generated quizzes - users can create and read their own
    match /generated_quizzes/{quizId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.generatedBy;
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.generatedBy || 
         request.auth.token.admin == true);
    }
    
    // Quiz categories - readable by all, writable by admins
    match /quiz_categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // User progress - users can read/write their own
    match /user_progress/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Leaderboards - readable by all authenticated users
    match /leaderboards/{leaderboardId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Analytics data - admins only
    match /analytics/{analyticsId} {
      allow read, write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // System settings - admins only
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // User sessions - users can read/write their own
    match /user_sessions/{sessionId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Quiz feedback - users can create, admins can read all
    match /quiz_feedback/{feedbackId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.admin == true);
      allow update, delete: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    function isEducator() {
      return request.auth != null && 
        (request.auth.token.admin == true || request.auth.token.educator == true);
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return request.auth != null && 
        request.auth.uid != null && 
        request.auth.token.email_verified == true;
    }
    
    function hasValidTimestamp() {
      return request.resource.data.timestamp is timestamp;
    }
    
    function isValidQuizResult() {
      return request.resource.data.keys().hasAll([
        'userId', 'quizId', 'percentage', 'timestamp'
      ]) &&
      request.resource.data.percentage >= 0 &&
      request.resource.data.percentage <= 100;
    }
  }
}
